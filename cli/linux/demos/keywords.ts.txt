import Path from 'path';
import { LinuxImpulseRunner } from './classifier/linux-impulse-runner';
import { AudioClassifier } from './classifier/audio-classifier';

const runnerPath = Path.join(process.cwd(), '..', 'jobs-container', 'cpp-exporter', 'linux-impulse-runner',
    'build', 'linux-impulse-runner');

let audioClassifier: AudioClassifier;

let firstExit = true;

const onSignal = async () => {
    if (!firstExit) {
        process.exit(1);
    }
    else {
        console.log('Received stop signal, stopping application... ' +
            'Press CTRL+C again to force quit.');
        firstExit = false;
        try {
            if (audioClassifier) {
                await audioClassifier.stop();
            }
            process.exit(0);
        }
        catch (ex2) {
            let ex = <Error>ex2;
            console.log('Failed to stop inferencing', ex.message);
        }
        process.exit(1);
    }
};

process.on('SIGHUP', onSignal);
process.on('SIGINT', onSignal);

// tslint:disable-next-line: no-floating-promises
(async () => {
    try {
        const runner = new LinuxImpulseRunner(runnerPath);
        const model = await runner.init();

        if (model.modelParameters.sensorType !== 'microphone') {
            throw new Error('Invalid sensorType: ' + model.modelParameters.sensorType);
        }

        audioClassifier = new AudioClassifier(runner);

        await audioClassifier.start(250);

        console.log('Started the audio classifier for',
            model.project.owner + ' / ' + model.project.name, '(v' + model.project.deploy_version + ')');
        console.log('Parameters', model.modelParameters);

        let lastFiveClassifications: string[] = [];
        let lastPrintedPrediction = 'uncertain';

        audioClassifier.on('result', (result, timeMs) => {
            // print the raw predicted values for this frame (turn into string here so the content does not jump around)
            // tslint:disable-next-line: no-unsafe-any
            let c = <{ [k: string]: string | number }>(<any>result.classification);
            for (let k of Object.keys(c)) {
                c[k] = (<number>c[k]).toFixed(4);
            }
            console.log('classifyRes', timeMs + 'ms.', c);

            // grab label with highest score this frame
            let highestLabel = Object.keys(result.classification)
                .find(k => Number(result.classification[k]) === Math.max(...Object.values(result.classification)));
            // if so we add it to the last five...
            if (highestLabel && result.classification[highestLabel] > 0.7) {
                lastFiveClassifications.unshift(highestLabel);
            }
            else {
                lastFiveClassifications.unshift('uncertain');
            }

            // look at the last 5 classifications
            lastFiveClassifications = lastFiveClassifications.slice(0, 5);

            // loop over all labels
            let prediction = 'uncertain';
            for (let k of model.modelParameters.labels) {
                // if 3x the same in the last 5?
                if (lastFiveClassifications.filter(x => x === k).length >= 3) {
                    prediction = k;
                }
            }
            // state changed? print it!
            if (prediction !== 'uncertain' && lastPrintedPrediction !== prediction) {
                console.log('Switch state \x1b[33m' + prediction + '\x1b[0m');
                lastPrintedPrediction = prediction;
            }
        });
    }
    catch (ex) {
        console.warn('Failed to run impulse', ex);
        process.exit(1);
    }
})();

function buildWavFileBuffer(data: Buffer, intervalMs: number) {
    // let's build a WAV file!
    let wavFreq = 1 / intervalMs * 1000;
    let fileSize = 44 + (data.length);
    let dataSize = (data.length);
    let srBpsC8 = (wavFreq * 16 * 1) / 8;

    let headerArr = new Uint8Array(44);
    let h = [
        0x52, 0x49, 0x46, 0x46, // RIFF
        // tslint:disable-next-line: no-bitwise
        fileSize & 0xff, (fileSize >> 8) & 0xff, (fileSize >> 16) & 0xff, (fileSize >> 24) & 0xff,
        0x57, 0x41, 0x56, 0x45, // WAVE
        0x66, 0x6d, 0x74, 0x20, // fmt
        0x10, 0x00, 0x00, 0x00, // length of format data
        0x01, 0x00, // type of format (1=PCM)
        0x01, 0x00, // number of channels
        // tslint:disable-next-line: no-bitwise
        wavFreq & 0xff, (wavFreq >> 8) & 0xff, (wavFreq >> 16) & 0xff, (wavFreq >> 24) & 0xff,
        // tslint:disable-next-line: no-bitwise
        srBpsC8 & 0xff, (srBpsC8 >> 8) & 0xff, (srBpsC8 >> 16) & 0xff, (srBpsC8 >> 24) & 0xff,
        0x02, 0x00, 0x10, 0x00,
        0x64, 0x61, 0x74, 0x61, // data
        // tslint:disable-next-line: no-bitwise
        dataSize & 0xff, (dataSize >> 8) & 0xff, (dataSize >> 16) & 0xff, (dataSize >> 24) & 0xff,
    ];
    for (let hx = 0; hx < 44; hx++) {
        headerArr[hx] = h[hx];
    }

    return Buffer.concat([ Buffer.from(headerArr), data ]);
}
